{{- if or (eq .Values.architecture "standalone") (eq .Values.architecture "sentinel") }}
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "valkey.fullname" . }}{{- if eq .Values.architecture "sentinel" }}-master{{- end }}
  namespace: {{ .Release.Namespace | quote }}
  labels:
    {{- include "valkey.master.labels" . | nindent 4 }}
  {{- with (include "valkey.annotations" .) }}
  annotations:
    {{- . | nindent 4 }}
  {{- end }}
spec:
  serviceName: {{ include "valkey.master.serviceName" . }}
  replicas: {{ if eq .Values.architecture "sentinel" }}{{ .Values.master.replicaCount }}{{ else }}{{ .Values.standalone.replicaCount }}{{ end }}
  selector:
    matchLabels:
      {{- include "valkey.master.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        {{- include "valkey.master.selectorLabels" . | nindent 8 }}
      {{- with (include "valkey.annotations" .) }}
      annotations:
        {{- . | nindent 8 }}
        checksum/config: {{ if eq .Values.architecture "sentinel" }}{{ include (print $.Template.BasePath "/master/configmap.yaml") . | sha256sum }}{{ else }}{{ include (print $.Template.BasePath "/configmap.yaml") . | sha256sum }}{{ end }}
        {{- if .Values.auth.enabled }}
        checksum/secret: {{ include (print $.Template.BasePath "/secret.yaml") . | sha256sum }}
        {{- end }}
      {{- end }}
    spec:
      {{- with .Values.image.pullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "valkey.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      {{- if .Values.sysctls.enabled }}
      initContainers:
        - name: init-sysctl
          image: {{ include "valkey.image" . }}
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          command:
            - /bin/sh
            - -c
            - |
              install_packages procps
              sysctl -w net.core.somaxconn=65535
          securityContext:
            privileged: true
            runAsUser: 0
          {{- if .Values.sysctls.resources }}
          resources: {{- toYaml .Values.sysctls.resources | nindent 12 }}
          {{- end }}
      {{- end }}
      {{- if and .Values.volumePermissions.enabled (or (and (eq .Values.architecture "sentinel") .Values.master.persistence.enabled) (and (ne .Values.architecture "sentinel") .Values.standalone.persistence.enabled)) }}
        - name: volume-permissions
          image: {{ .Values.volumePermissions.image.registry }}/{{ .Values.volumePermissions.image.repository }}:{{ .Values.volumePermissions.image.tag }}
          imagePullPolicy: {{ .Values.volumePermissions.image.pullPolicy }}
          command:
            - /bin/bash
            - -ec
            - |
              chown -R {{ .Values.podSecurityContext.runAsUser }}:{{ .Values.podSecurityContext.fsGroup }} /data
          securityContext:
            runAsUser: 0
          {{- if .Values.volumePermissions.resources }}
          resources: {{- toYaml .Values.volumePermissions.resources | nindent 12 }}
          {{- end }}
          volumeMounts:
            - name: valkey-data
              mountPath: /data
      {{- end }}
      containers:
        - name: valkey
          image: {{ include "valkey.image" . }}
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          command:
            - /bin/bash
          args:
            - -c
            - |
              {{- if .Values.auth.enabled }}
              export REDISCLI_AUTH="$VALKEY_PASSWORD"
              # Copy config and add requirepass
              cp /opt/valkey/etc/valkey.conf /tmp/valkey.conf
              echo "requirepass $VALKEY_PASSWORD" >> /tmp/valkey.conf
              valkey-server /tmp/valkey.conf
              {{- else }}
              valkey-server /opt/valkey/etc/valkey.conf
              {{- end }}
          env:
            {{- if .Values.auth.enabled }}
            - name: VALKEY_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ include "valkey.secretName" . }}
                  key: {{ include "valkey.secretPasswordKey" . }}
            {{- end }}
          ports:
            - name: valkey
              containerPort: 6379
              protocol: TCP
          livenessProbe:
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 3
            exec:
              command:
                - sh
                - -c
                - /health/ping_liveness_local.sh 5
          readinessProbe:
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 3
            exec:
              command:
                - sh
                - -c
                - /health/ping_readiness_local.sh 1
          {{- if eq .Values.architecture "sentinel" }}
          {{- if .Values.master.resources }}
          resources: {{- toYaml .Values.master.resources | nindent 12 }}
          {{- end }}
          {{- else }}
          {{- if .Values.standalone.resources }}
          resources: {{- toYaml .Values.standalone.resources | nindent 12 }}
          {{- end }}
          {{- end }}
          volumeMounts:
            - name: health
              mountPath: /health
            - name: valkey-data
              mountPath: /data
            - name: config
              mountPath: /opt/valkey/etc/valkey.conf
              subPath: valkey.conf
            - name: tmp
              mountPath: /tmp
        {{- if .Values.metrics.enabled }}
        - name: metrics
          image: {{ include "valkey.metrics.image" . }}
          imagePullPolicy: {{ .Values.metrics.image.pullPolicy }}
          env:
            - name: REDIS_ALIAS
              value: {{ include "valkey.fullname" . }}
            - name: REDIS_EXPORTER_WEB_LISTEN_ADDRESS
              value: {{ printf ":%v" .Values.metrics.containerPorts.http }}
            {{- if .Values.auth.enabled }}
            - name: REDIS_USER
              value: default
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ include "valkey.secretName" . }}
                  key: {{ include "valkey.secretPasswordKey" . }}
            {{- end }}
            {{- if (include "valkey.tls.enabled" .) }}
            - name: REDIS_ADDR
              value: rediss://{{ .Values.metrics.redisTargetHost }}:{{ .Values.tls.port }}
            - name: REDIS_EXPORTER_TLS_CLIENT_KEY_FILE
              value: {{ include "valkey.tls.certKeyFilename" . }}
            - name: REDIS_EXPORTER_TLS_CLIENT_CERT_FILE
              value: {{ include "valkey.tls.certFilename" . }}
            - name: REDIS_EXPORTER_TLS_CA_CERT_FILE
              value: {{ include "valkey.tls.caCertFilename" . }}
            {{- end }}
          ports:
            - name: http-metrics
              containerPort: {{ .Values.metrics.containerPorts.http }}
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /
              port: http-metrics
            initialDelaySeconds: 15
            timeoutSeconds: 5
          readinessProbe:
            httpGet:
              path: /
              port: http-metrics
            initialDelaySeconds: 5
            timeoutSeconds: 1
          {{- if .Values.metrics.resources }}
          resources: {{- toYaml .Values.metrics.resources | nindent 12 }}
          {{- end }}
        {{- end }}
      {{- if eq .Values.architecture "sentinel" }}
      {{- with .Values.master.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.master.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.master.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- else }}
      {{- with .Values.standalone.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.standalone.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.standalone.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- end }}
      volumes:
        - name: health
          configMap:
            name: {{ printf "%s-health" (include "valkey.fullname" .) }}
            defaultMode: 0755
        - name: config
          configMap:
            name: {{ if eq .Values.architecture "sentinel" }}{{ printf "%s-master" (include "valkey.fullname" .) }}{{ else }}{{ include "valkey.fullname" . }}{{ end }}
        - name: tmp
          emptyDir: {}
  {{- if or (and (eq .Values.architecture "sentinel") .Values.master.persistence.enabled) (and (ne .Values.architecture "sentinel") .Values.standalone.persistence.enabled) }}
  volumeClaimTemplates:
    - metadata:
        name: valkey-data
        labels:
          {{- include "valkey.master.labels" . | nindent 10 }}
        {{- if eq .Values.architecture "sentinel" }}
        {{- with .Values.master.persistence.annotations }}
        annotations:
          {{- toYaml . | nindent 10 }}
        {{- end }}
        {{- else }}
        {{- with .Values.standalone.persistence.annotations }}
        annotations:
          {{- toYaml . | nindent 10 }}
        {{- end }}
        {{- end }}
      spec:
        accessModes:
          {{- if eq .Values.architecture "sentinel" }}
          {{- range .Values.master.persistence.accessModes }}
          - {{ . | quote }}
          {{- end }}
          {{- else }}
          {{- range .Values.standalone.persistence.accessModes }}
          - {{ . | quote }}
          {{- end }}
          {{- end }}
        resources:
          requests:
            storage: {{ if eq .Values.architecture "sentinel" }}{{ .Values.master.persistence.size | quote }}{{ else }}{{ .Values.standalone.persistence.size | quote }}{{ end }}
        {{- if eq .Values.architecture "sentinel" }}
        {{- if .Values.master.persistence.storageClass }}
        {{- if (eq "-" .Values.master.persistence.storageClass) }}
        storageClassName: ""
        {{- else }}
        storageClassName: {{ .Values.master.persistence.storageClass | quote }}
        {{- end }}
        {{- else if .Values.global.storageClass }}
        storageClassName: {{ .Values.global.storageClass | quote }}
        {{- end }}
        {{- with .Values.master.persistence.selector }}
        selector:
          {{- toYaml . | nindent 10 }}
        {{- end }}
        {{- else }}
        {{- if .Values.standalone.persistence.storageClass }}
        {{- if (eq "-" .Values.standalone.persistence.storageClass) }}
        storageClassName: ""
        {{- else }}
        storageClassName: {{ .Values.standalone.persistence.storageClass | quote }}
        {{- end }}
        {{- else if .Values.global.storageClass }}
        storageClassName: {{ .Values.global.storageClass | quote }}
        {{- end }}
        {{- with .Values.standalone.persistence.selector }}
        selector:
          {{- toYaml . | nindent 10 }}
        {{- end }}
        {{- end }}
  {{- else }}
        - name: valkey-data
          emptyDir: {}
  {{- end }}
{{- end }}