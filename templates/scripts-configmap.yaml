apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "valkey.fullname" . }}-scripts
  namespace: {{ .Release.Namespace | quote }}
  labels:
    {{- include "valkey.labels" . | nindent 4 }}
  {{- with (include "valkey.annotations" .) }}
  annotations:
    {{- . | nindent 4 }}
  {{- end }}
data:
{{- if eq .Values.architecture "sentinel" }}
  start-node.sh: |
    #!/bin/bash

    set -o errexit
    set -o nounset
    set -o pipefail

    # Debug function
    debug() {
        echo "[DEBUG] $*" >&2
    }

    # Get service port
    get_port() {
        hostname="$1"
        type="$2"

        port_var=$(echo "${hostname^^}_SERVICE_PORT_$type" | sed "s/-/_/g")
        port=${!port_var:-}

        if [ -z "$port" ]; then
            case $type in
                "SENTINEL")
                    echo {{ .Values.sentinel.service.sentinelPort }}
                    ;;
                "VALKEY"|"REDIS")
                    echo {{ include "valkey.port" . }}
                    ;;
            esac
        else
            echo $port
        fi
    }

    # Get full hostname
    get_full_hostname() {
        hostname="$1"
        full_hostname="${hostname}.{{ include "valkey.fullname" . }}-headless.{{ .Release.Namespace }}.svc.{{ .Values.clusterDomain | default "cluster.local" }}"
        echo $full_hostname
    }

    # Get Valkey password
    get_valkey_password() {
        if [[ -n "${VALKEY_PASSWORD_FILE:-}" ]] && [[ -f "${VALKEY_PASSWORD_FILE}" ]]; then
            echo "$(< "${VALKEY_PASSWORD_FILE}")"
        else
            echo "${VALKEY_PASSWORD:-}"
        fi
    }

    # Setup master
    setup_master() {
        debug "Setting up Valkey master..."

        export VALKEY_REPLICATION_MODE="master"
        {{- if include "valkey.auth.enabled" . }}
        export VALKEY_PASSWORD="$(get_valkey_password)"
        export REDISCLI_AUTH="$VALKEY_PASSWORD"
        {{- end }}

        debug "Starting Valkey master on port {{ include "valkey.port" . }}"
    }

    # Setup replica
    setup_replica() {
        debug "Setting up Valkey replica..."

        export VALKEY_REPLICATION_MODE="slave"
        export VALKEY_MASTER_HOST="{{ include "valkey.master.serviceName" . }}"
        export VALKEY_MASTER_PORT="{{ include "valkey.port" . }}"

        {{- if include "valkey.auth.enabled" . }}
        export VALKEY_PASSWORD="$(get_valkey_password)"
        export VALKEY_MASTER_PASSWORD="$VALKEY_PASSWORD"
        export REDISCLI_AUTH="$VALKEY_PASSWORD"
        {{- end }}

        debug "Connecting to master at $VALKEY_MASTER_HOST:$VALKEY_MASTER_PORT"
    }

    # Setup sentinel
    setup_sentinel() {
        debug "Setting up Valkey sentinel..."

        export VALKEY_SENTINEL_MODE="yes"
        export VALKEY_SENTINEL_PORT="{{ .Values.sentinel.service.sentinelPort }}"

        {{- if include "valkey.auth.enabled" . }}
        export VALKEY_PASSWORD="$(get_valkey_password)"
        export REDISCLI_AUTH="$VALKEY_PASSWORD"
        {{- end }}

        debug "Starting Sentinel on port $VALKEY_SENTINEL_PORT"
    }

    # Main execution
    case "${VALKEY_NODE_TYPE:-}" in
        "master")
            setup_master
            ;;
        "replica")
            setup_replica
            ;;
        "sentinel")
            setup_sentinel
            ;;
        *)
            echo "ERROR: VALKEY_NODE_TYPE must be set to 'master', 'replica', or 'sentinel'"
            exit 1
            ;;
    esac

    debug "Node setup completed successfully"

  start-master.sh: |
    #!/bin/bash
    set -e

    {{- if include "valkey.auth.enabled" . }}
    export VALKEY_PASSWORD="$(< "${VALKEY_PASSWORD_FILE}")"
    {{- end }}

    # Copy configuration
    cp /opt/valkey-config/master.conf /tmp/valkey.conf

    {{- if include "valkey.auth.enabled" . }}
    echo "requirepass $VALKEY_PASSWORD" >> /tmp/valkey.conf
    echo "masterauth $VALKEY_PASSWORD" >> /tmp/valkey.conf
    {{- end }}

    # Start Valkey master
    exec valkey-server /tmp/valkey.conf

  start-replica.sh: |
    #!/bin/bash
    set -e

    {{- if include "valkey.auth.enabled" . }}
    export VALKEY_PASSWORD="$(< "${VALKEY_PASSWORD_FILE}")"
    {{- end }}

    # Copy configuration
    cp /opt/valkey-config/replica.conf /tmp/valkey.conf

    # Configure replication
    echo "replicaof {{ include "valkey.master.serviceName" . }} {{ include "valkey.port" . }}" >> /tmp/valkey.conf

    {{- if include "valkey.auth.enabled" . }}
    echo "requirepass $VALKEY_PASSWORD" >> /tmp/valkey.conf
    echo "masterauth $VALKEY_PASSWORD" >> /tmp/valkey.conf
    {{- end }}

    # Start Valkey replica
    exec valkey-server /tmp/valkey.conf

  start-sentinel.sh: |
    #!/bin/bash
    set -e

    {{- if include "valkey.auth.enabled" . }}
    export VALKEY_PASSWORD="$(< "${VALKEY_PASSWORD_FILE}")"
    {{- end }}

    # Copy base configuration
    cp /opt/valkey-config/sentinel.conf /tmp/sentinel.conf

    # Add sentinel configuration
    cat >> /tmp/sentinel.conf << EOF
    sentinel monitor valkey-master {{ include "valkey.master.serviceName" . }} {{ include "valkey.port" . }} {{ .Values.sentinel.quorum }}
    sentinel down-after-milliseconds valkey-master {{ .Values.sentinel.downAfterMilliseconds }}
    sentinel failover-timeout valkey-master {{ .Values.sentinel.failoverTimeout }}
    sentinel parallel-syncs valkey-master {{ .Values.sentinel.parallelSyncs }}
    {{- if include "valkey.auth.enabled" . }}
    sentinel auth-pass valkey-master $VALKEY_PASSWORD
    {{- end }}
    EOF

    # Start Sentinel
    exec valkey-sentinel /tmp/sentinel.conf

{{- else }}
  start-valkey.sh: |
    #!/bin/bash
    set -e

    {{- if include "valkey.auth.enabled" . }}
    export VALKEY_PASSWORD="$(< "${VALKEY_PASSWORD_FILE}")"
    {{- end }}

    # Copy configuration
    cp /opt/valkey-config/valkey.conf /tmp/valkey.conf

    {{- if include "valkey.auth.enabled" . }}
    echo "requirepass $VALKEY_PASSWORD" >> /tmp/valkey.conf
    {{- end }}

    # Start Valkey
    exec valkey-server /tmp/valkey.conf
{{- end }}