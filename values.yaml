# Valkey Helm Chart - Minimal Configuration

# Deployment mode: standalone or sentinel
architecture: standalone

global:
  imageRegistry: ""
  imagePullSecrets: []
  storageClass: ""

# Cluster domain for service discovery
clusterDomain: cluster.local

# Valkey image configuration
image:
  registry: docker.io
  repository: valkey/valkey
  tag: "8.1.3"
  pullPolicy: IfNotPresent

# Common configuration
nameOverride: ""
fullnameOverride: ""

# Authentication configuration
auth:
  enabled: false
  password: ""
  existingSecret: ""
  existingSecretPasswordKey: "password"
  sentinel: false

# Network Policy
networkPolicy:
  enabled: false
  allowExternal: true
  ingressNSMatchLabels: {}
  ingressNSPodMatchLabels: {}

# RBAC configuration
rbac:
  create: false

# Service Account
serviceAccount:
  create: true
  annotations: {}
  name: ""

# Pod Security Context
podSecurityContext:
  fsGroup: 999
  runAsUser: 999
  runAsGroup: 999

# Security Context
securityContext:
  allowPrivilegeEscalation: false
  capabilities:
    drop:
    - ALL
  readOnlyRootFilesystem: true
  runAsNonRoot: true
  runAsUser: 999

# Common annotations and labels
commonAnnotations: {}
commonLabels: {}

# Standalone Configuration
standalone:
  replicaCount: 1

  resources:
    limits:
      memory: 256Mi
    requests:
      cpu: 100m
      memory: 128Mi

  nodeSelector: {}
  tolerations: []
  affinity: {}

  persistence:
    enabled: true
    storageClass: ""
    accessModes:
      - ReadWriteOnce
    size: 8Gi
    annotations: {}

  service:
    type: ClusterIP
    port: 6379
    targetPort: valkey
    annotations: {}

  configuration: |-
    # Valkey configuration
    bind 0.0.0.0
    port 6379
    tcp-backlog 511
    timeout 0
    tcp-keepalive 300

    # Memory configuration
    maxmemory-policy allkeys-lru

    # Persistence
    save 900 1
    save 300 10
    save 60 10000

    # Logging
    loglevel notice

    # Security
    protected-mode no

# Sentinel Configuration
sentinel:
  enabled: false
  replicaCount: 3
  quorum: 2
  masterSet: mymaster
  downAfterMilliseconds: 30000
  failoverTimeout: 180000
  parallelSyncs: 1

  image:
    registry: docker.io
    repository: valkey/valkey
    tag: "8.1.3"
    pullPolicy: IfNotPresent

  serviceAccount:
    create: false
    annotations: {}
    name: ""
    automountServiceAccountToken: true

  podSecurityContext:
    enabled: true
    fsGroup: 999
    runAsUser: 999
    runAsGroup: 999

  containerSecurityContext:
    enabled: true
    allowPrivilegeEscalation: false
    capabilities:
      drop:
      - ALL
    readOnlyRootFilesystem: true
    runAsNonRoot: true
    runAsUser: 999

  resources:
    limits:
      memory: 256Mi
    requests:
      cpu: 100m
      memory: 128Mi

  livenessProbe:
    enabled: true
    initialDelaySeconds: 20
    periodSeconds: 5
    timeoutSeconds: 5
    successThreshold: 1
    failureThreshold: 5

  readinessProbe:
    enabled: true
    initialDelaySeconds: 20
    periodSeconds: 5
    timeoutSeconds: 1
    successThreshold: 1
    failureThreshold: 5

  service:
    type: ClusterIP
    port: 26379
    clusterIP: ""
    nodePort: ""
    loadBalancerIP: ""
    loadBalancerSourceRanges: []
    annotations: {}
    sessionAffinity: None
    sessionAffinityConfig: {}
    internalTrafficPolicy: Cluster
    externalTrafficPolicy: Cluster
    extraPorts: []
    nodePorts:
      sentinel: ""
      sentinelTls: ""

  nodeSelector: {}
  tolerations: []
  affinity: {}
  topologySpreadConstraints: []
  priorityClassName: ""
  terminationGracePeriodSeconds: 30

  podAnnotations: {}
  extraEnvVars: []
  extraEnvVarsCM: ""
  extraEnvVarsSecret: ""
  extraVolumes: []
  extraVolumeMounts: []
  initContainers: []
  sidecars: []

# Master configuration for sentinel mode
master:
  replicaCount: 1

  serviceAccount:
    create: false
    annotations: {}
    name: ""
    automountServiceAccountToken: true

  podSecurityContext:
    enabled: true
    fsGroup: 999
    runAsUser: 999
    runAsGroup: 999

  containerSecurityContext:
    enabled: true
    allowPrivilegeEscalation: false
    capabilities:
      drop:
      - ALL
    readOnlyRootFilesystem: true
    runAsNonRoot: true
    runAsUser: 999

  resources:
    limits:
      memory: 256Mi
    requests:
      cpu: 100m
      memory: 128Mi

  livenessProbe:
    enabled: true
    initialDelaySeconds: 20
    periodSeconds: 5
    timeoutSeconds: 5
    successThreshold: 1
    failureThreshold: 5

  readinessProbe:
    enabled: true
    initialDelaySeconds: 20
    periodSeconds: 5
    timeoutSeconds: 1
    successThreshold: 1
    failureThreshold: 5

  nodeSelector: {}
  tolerations: []
  affinity: {}
  topologySpreadConstraints: []
  priorityClassName: ""
  terminationGracePeriodSeconds: 30

  persistence:
    enabled: true
    storageClass: ""
    accessModes:
      - ReadWriteOnce
    size: 8Gi
    annotations: {}
    selector: {}

  service:
    type: ClusterIP
    port: 6379
    clusterIP: ""
    nodePort: ""
    loadBalancerIP: ""
    loadBalancerSourceRanges: []
    annotations: {}
    sessionAffinity: None
    sessionAffinityConfig: {}
    internalTrafficPolicy: Cluster
    externalTrafficPolicy: Cluster
    extraPorts: []
    nodePorts:
      valkey: ""
      valkeyTls: ""

  podAnnotations: {}
  extraEnvVars: []
  extraEnvVarsCM: ""
  extraEnvVarsSecret: ""
  extraVolumes: []
  extraVolumeMounts: []
  initContainers: []
  sidecars: []

  podSecurityPolicy:
    enabled: false

  podDisruptionBudget:
    enabled: false
    minAvailable: 1
    maxUnavailable: ""

  configuration: |-
    # Valkey master configuration
    bind 0.0.0.0
    port 6379
    tcp-backlog 511
    timeout 0
    tcp-keepalive 300
    maxmemory-policy allkeys-lru
    save 900 1
    save 300 10
    save 60 10000
    loglevel notice
    protected-mode no

# Replica configuration for sentinel mode
replica:
  replicaCount: 2

  serviceAccount:
    create: false
    annotations: {}
    name: ""
    automountServiceAccountToken: true

  podSecurityContext:
    enabled: true
    fsGroup: 999
    runAsUser: 999
    runAsGroup: 999

  containerSecurityContext:
    enabled: true
    allowPrivilegeEscalation: false
    capabilities:
      drop:
      - ALL
    readOnlyRootFilesystem: true
    runAsNonRoot: true
    runAsUser: 999

  resources:
    limits:
      memory: 256Mi
    requests:
      cpu: 100m
      memory: 128Mi

  livenessProbe:
    enabled: true
    initialDelaySeconds: 20
    periodSeconds: 5
    timeoutSeconds: 5
    successThreshold: 1
    failureThreshold: 5

  readinessProbe:
    enabled: true
    initialDelaySeconds: 20
    periodSeconds: 5
    timeoutSeconds: 1
    successThreshold: 1
    failureThreshold: 5

  nodeSelector: {}
  tolerations: []
  affinity: {}
  topologySpreadConstraints: []
  priorityClassName: ""
  terminationGracePeriodSeconds: 30

  persistence:
    enabled: true
    storageClass: ""
    accessModes:
      - ReadWriteOnce
    size: 8Gi
    annotations: {}
    selector: {}
    subPath: ""

  service:
    type: ClusterIP
    port: 6379
    clusterIP: ""
    nodePort: ""
    loadBalancerIP: ""
    loadBalancerSourceRanges: []
    annotations: {}
    sessionAffinity: None
    sessionAffinityConfig: {}
    internalTrafficPolicy: Cluster
    externalTrafficPolicy: Cluster
    extraPorts: []
    nodePorts:
      valkey: ""
      valkeyTls: ""

  podAnnotations: {}
  extraEnvVars: []
  extraEnvVarsCM: ""
  extraEnvVarsSecret: ""
  extraVolumes: []
  extraVolumeMounts: []
  initContainers: []
  sidecars: []

  configuration: |-
    # Valkey replica configuration
    bind 0.0.0.0
    port 6379
    tcp-backlog 511
    timeout 0
    tcp-keepalive 300
    maxmemory-policy allkeys-lru
    save ""
    loglevel notice
    protected-mode no

# Metrics configuration
metrics:
  enabled: false
  port: 9121

  image:
    registry: docker.io
    repository: oliver006/redis_exporter
    tag: "v1.77.0"
    pullPolicy: IfNotPresent

  containerSecurityContext:
    enabled: true
    allowPrivilegeEscalation: false
    capabilities:
      drop:
      - ALL
    readOnlyRootFilesystem: true
    runAsNonRoot: true
    runAsUser: 999

  resources:
    limits:
      memory: 256Mi
    requests:
      cpu: 100m
      memory: 128Mi

  redisTargetHost: "localhost"

  containerPorts:
    http: 9121

  extraArgs: {}

  podAnnotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "9121"

  service:
    type: ClusterIP
    port: 9121
    annotations: {}
    nodePort: ""
    loadBalancerIP: ""
    loadBalancerSourceRanges: []
    clusterIP: ""
    sessionAffinity: None
    sessionAffinityConfig: {}
    internalTrafficPolicy: Cluster
    externalTrafficPolicy: Cluster
    extraPorts: []

  serviceMonitor:
    enabled: false
    namespace: ""
    interval: ""
    scrapeTimeout: ""
    honorLabels: false
    metricRelabelings: []
    relabelings: []
    annotations: {}
    jobLabel: ""
    additionalLabels: {}
    podTargetLabels: []
    sampleLimit: false
    targetLimit: false
    additionalEndpoints: []

  podMonitor:
    enabled: false
    namespace: ""
    interval: ""
    scrapeTimeout: ""
    honorLabels: false
    metricRelabelings: []
    relabelings: []
    annotations: {}
    jobLabel: ""
    additionalLabels: {}
    podTargetLabels: []
    sampleLimit: false
    targetLimit: false
    additionalEndpoints: []

  prometheusRule:
    enabled: false
    namespace: ""
    labels: {}
    annotations: {}
    rules: []

# Init containers for volume permissions
volumePermissions:
  enabled: false
  image:
    registry: docker.io
    repository: alpine
    tag: "3.19"
    pullPolicy: IfNotPresent

  containerSecurityContext:
    enabled: true
    capabilities:
      drop:
      - ALL
      add:
      - CHOWN
      - FOWNER
      - DAC_OVERRIDE
    runAsUser: 0

  resources:
    limits:
      memory: 128Mi
    requests:
      cpu: 50m
      memory: 64Mi

# Sysctls configuration
sysctls:
  enabled: false

# Additional configuration options
existingConfigmap: ""

# Extra environment variables
extraEnvVars: []

# Extra volumes
extraVolumes: []

# Extra volume mounts
extraVolumeMounts: []

# TLS Configuration
tls:
  enabled: false
  port: 6380
  existingSecret: ""
  certFilename: "tls.crt"
  certKeyFilename: "tls.key"
  caCertFilename: "ca.crt"
  authClients: true

# Extra resources to deploy
extraDeploy: []

# External service configuration (can be configured via service type)
# Use standalone.service.type: LoadBalancer for external access

# Service Binding configuration
serviceBinding:
  enabled: false

# Headless service configuration
headlessService:
  annotations: {}
  extraPorts: []

# Pod Security Policy
podSecurityPolicy:
  enabled: false

# Diagnostic mode
diagnosticMode:
  enabled: false

